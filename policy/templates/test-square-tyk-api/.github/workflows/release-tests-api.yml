name: Release

on:
  workflow_dispatch:
  workflow_call:
  pull_request:
  push:
    branches:
      - master
      - release-*

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install flake for linting
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  docker:
    needs: linting
    runs-on: ubuntu-latest
    outputs:
      tags: {{`${{ steps.metadata.outputs.tags }}`}}
    steps:      
      - name: Checkout
        uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::754489498669:role/ecr_rw_tyk
          role-session-name: cipush
          aws-region: eu-central-1

      - uses: aws-actions/amazon-ecr-login@v2
        id: ecr
        with:
          mask-password: 'true'
          mask-aws-account-id: 'true'   

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: {{`${{ steps.ecr.outputs.registry }}`}}/tyk-automated-tests
          flavor: |
            latest=false
          tags: |
              type=ref,event=branch
              type=sha,format=long,prefix=

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4

        with:
          context: .
          platforms: linux/amd64
          push: true
          # push: {{`${{ github.event_name != 'pull_request' }}`}}
          tags: {{`${{ steps.metadata.outputs.tags }}`}}
          labels: {{`${{ steps.metadata.outputs.labels }}`}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
    
{{ $repo := .Name }}
{{ $features := .Branchvals.Features }}
{{ range $test := .Branchvals.Tests }}
  test-controller-{{ $test }}:
    needs: docker
    runs-on: ubuntu-latest
    container: tykio/gromit:v1.8
    outputs:
      gd_tag: {{`${{ steps.params.outputs.gd_tag }}`}}
      versions: {{`${{ steps.params.outputs.versions }}`}}
    steps:
      - name: set params
        id: params
        env:
          REPO: {{`${{ github.repository }}`}}
          # Cover pull_request_target too
          BASE_REF: {{`${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref}}`}}
          TAGS: "master"
          IS_PR: {{`${{startsWith(github.event_name, 'pull_request') && 'yes' }}`}}
          IS_TAG: {{`${{startsWith(github.ref, 'refs/tags') && 'yes' }}`}}
          JOB: {{ $test }}
        run: gromit policy controller --loglevel debug | tee -a "$GITHUB_OUTPUT"
  {{ $test }}-tests:
    needs: [docker, test-controller-{{ $test }}]
    runs-on: ubuntu-latest
    env:
      METADATA_REPORT_PATH: /tmp/metadata.toml
      {{ if eq $test "ui" }}
      XUNIT_REPORT_PATH: {{`${{ github.workspace }}`}}/tyk-analytics/tests/ui/playwright-report/results.xml
      {{- end }}
      {{ if eq $test "api" }}
      XUNIT_REPORT_PATH: {{`${{ github.workspace }}`}}/reports/pytest-report.xml
      {{- end }}     
    permissions:
      id-token: write # This is required for requesting the Github JWT
      contents: read # This is required for actions/checkout
    strategy:
      fail-fast: false
      matrix:		
        conf: ["sha256", "murmur128"]
        db: ["mongo7", "postgres15"]
        cache_db: ["redis7"]
        pump: ["tykio/tyk-pump-docker-pub:v1.8", "$ECR/tyk-pump:master"]
        sink: ["tykio/tyk-mdcb-docker:v2.4", "$ECR/tyk-sink:master"]
        exclude: 
          - pump: tykio/tyk-pump-docker-pub:v1.8
            sink: $ECR/tyk-sink:master
          - pump: $ECR/tyk-pump:master
            sink: tykio/tyk-mdcb-docker:v2.4
          - db: mongo7
            conf: murmur128
          - db: postgres15
            conf: sha256
        include:
          - db: postgres15
            markers: "and not sql"
            {{- template "auto-test" (dict "test" $test "repo" $repo "features" $features) }}            
{{ end }} {{/* end of the range */}} 