{{ define "ui-tests" }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::754489498669:role/ecr_rw_tyk
          role-session-name: cipush
          aws-region: eu-central-1
      - id: ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
          # Only {{`${{ github.actor }}`}} has access
          # See https://github.com/mxschmitt/action-tmate#use-registered-public-ssh-keys
      - name: Setup tmate session only in debug mode
        uses: mxschmitt/action-tmate@v3
        if: {{`${{ runner.debug == '1' }}`}}
        with:
          detached: true
          limit-access-to-actor: true
      - name: Install Node.js {{`${{ matrix.node-version }}`}}
        uses: actions/setup-node@v2.4.1
        with:
          node-version: {{`${{ matrix.node-version }}`}}  
      - name: Fix private module deps
        env:
          TOKEN: '{{`${{ secrets.ORG_GH_TOKEN }}`}}'
        run: >
          git config --global url."https://${TOKEN}@github.com".insteadOf "https://github.com"                    
      - name: Checkout of Dashboard
        uses: actions/checkout@v4
        with:
          ref: {{`${{ github.event.pull_request.head.sha }}`}}
          fetch-depth: 1
          token: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          sparse-checkout: |
            tests/ui
            bin
          submodules: false    
      - name: fetch env from tyk-ci
        env:
          GH_TOKEN: {{`${{ github.token }}`}}
        run: |
          gh release download --repo github.com/TykTechnologies/tyk-ci -O env.tgz --archive=tar.gz
          tar xzvf env.tgz
          mv tyk-ci*/auto .
      - name: env up
        shell: bash
        working-directory: auto
        id: env_up
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          TYK_DB_LICENSEKEY: {{`${{ secrets.DASH_LICENSE }}`}}
          TYK_MDCB_LICENSE: {{`${{ secrets.MDCB_LICENSE }}`}}
          ECR: {{`${{ steps.ecr.outputs.registry }}`}}
          VERSIONS: {{`${{ needs.test-controller-ui.outputs.versions}}`}}
        run: |
          echo "ECR=${ECR}
          $VERSIONS
          tyk_pump_image={{`${{matrix.pump}}`}}
          tyk_sink_image={{`${{matrix.sink}}`}}
          confs_dir=./pro
          env_file=local-{{`${{ matrix.db }}`}}.env" > versions.env
          echo "::group::versions"
          cat versions.env
          echo "::endgroup::"
          # Add Tyk component config variations to $env_file
          cat confs/{{`${{ matrix.conf }}`}}.env >> local-{{`${{ matrix.db }}`}}.env
          # bring up env, the project name is important
          docker compose -p auto -f pro.yml -f deps_pro.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile master-datacenter up --quiet-pull -d
      - name: Install test dependecies
        run: |
          npm ci
        working-directory: tests/ui
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: tests/ui
      - name: Execute UI tests
        id: ui_test_execution
        run: |
          npm run test
        working-directory: tests/ui
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0
          SLACK_AUTH_TOKEN: {{`${{ secrets.UI_SLACK_AUTH_TOKEN }}`}}
          EVENT_TRIGGER: {{`${{ github.event_name }}`}} ({{`${{ github.actor }}`}})
          JOB_RUN_ID: {{`${{ github.run_id }}`}}
          JOB_NAME: tyk-analytics - {{`${{ github.ref }}`}} {{`${{ github.event.head_commit.message }}`}}
          RUN_ID: 'tyk-analytics/{{`${{ github.run_id }}`}}'
      - name: Docker logs for all components
        if: failure() && (steps.ui_test_execution.outcome != 'success' || steps.env_up.outcome != 'success')
        working-directory: auto
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          TYK_DB_LICENSEKEY: {{`${{ secrets.DASH_LICENSE }}`}}
          TYK_MDCB_LICENSE: {{`${{ secrets.MDCB_LICENSE }}`}}
          ECR: {{`${{ steps.ecr.outputs.registry }}`}}
          VERSIONS: {{`${{ needs.test-controller-ui.outputs.versions}}`}}
        run: |
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile all logs | sort > {{`${{ github.workspace }}`}}/docker-compose.log
          echo "::group::DockerLogs"
          cat {{`${{ github.workspace }}`}}/docker-compose.log
          echo "::endgroup::"   
  
      - name: Upload Playwright Test Report to S3
        if: failure() && steps.ui_test_execution.outcome != 'success' && steps.env_up.outcome == 'success'
        run:
          npm run upload_report_to_s3
        env:
          AWS_ACCESS_KEY_ID: {{`${{ secrets.UI_AWS_ACCESS_KEY_ID }}`}}
          AWS_SECRET_ACCESS_KEY: {{`${{ secrets.UI_AWS_SECRET_ACCESS_KEY }}`}}
          RUN_ID: 'tyk-analytics/{{`${{ github.run_id }}`}}'
        working-directory: tests/ui

      - name: Post message to automation team
        if: failure() && steps.ui_test_execution.outcome != 'success' && !github.event.pull_request.draft 
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: '@konrad'
          slack-message: "GitHub build result: {{`${{ job.status }}`}}\n{{`${{ github.event.pull_request.html_url || github.event.head_commit.url }}`}}"
        env:
          SLACK_BOT_TOKEN: {{`${{ secrets.UI_SLACK_AUTH_TOKEN }}`}}

      - name: Share S3 report link into summary
        if: always() && !github.event.pull_request.draft
        run: |
          echo "# :clipboard: S3 UI Test REPORT: {{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: {{`${{ steps.ui_test_execution.outcome == 'success' && ':white_check_mark:' || ':no_entry_sign:' }}`}}" >> $GITHUB_STEP_SUMMARY
          echo "- [Link to report](https://tyk-qa-reports.s3.eu-central-1.amazonaws.com/tyk-analytics/{{`${{ github.run_id }}`}}/index.html)" >> $GITHUB_STEP_SUMMARY
  
      - name: Xray update
        if: {{`${{ always() }}`}} && github.event_name != 'pull_request'
        run: |
          ./update_xray.sh
        working-directory: bin
        env:
          TEST: "QA-890"
          STATUS: "{{`${{ steps.ui_test_execution.outcome }}`}}"
          CLIENT_ID: {{`${{secrets.XRAY_CLIENT_ID}}`}}
          CLIENT_SECRET: {{`${{secrets.XRAY_CLIENT_SECRET}}`}}
          BRANCH: {{`${{ github.ref }}`}}					
{{ end }}