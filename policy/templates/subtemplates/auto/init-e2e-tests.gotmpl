{{ define "init-e2e-tests" }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::754489498669:role/ecr_rw_tyk
          role-session-name: cipush
          aws-region: eu-central-1

      - id: ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

        # Only {{`${{ github.actor }}`}} has access
        # See https://github.com/mxschmitt/action-tmate#use-registered-public-ssh-keys

      - name: Setup tmate session only in debug mode
        uses: mxschmitt/action-tmate@v3
        if: runner.debug == '1'
        with:
          detached: true
          limit-access-to-actor: true

      - name: fetch env from tyk-ci
        env:
          GH_TOKEN: {{`${{ github.token }}`}}
        run: |
          gh release download --repo github.com/TykTechnologies/tyk-ci -p 'ci-env.tgz' -O env.tgz
          tar xzvf env.tgz

      - name: env up
        shell: bash
        working-directory: auto
        id: env_up
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          TYK_DB_LICENSEKEY: {{`${{ secrets.DASH_LICENSE }}`}}
          TYK_MDCB_LICENSE: {{`${{ secrets.MDCB_LICENSE }}`}}
          ECR: {{`${{ steps.ecr.outputs.registry }}`}}					
          VERSIONS: {{`${{ needs.test-controller-{{ $testsuite }}.outputs.versions}}`}}
        run: |
          echo "ECR=${ECR}
          $VERSIONS
          {{ if ne .Name "tyk-pump" -}}tyk_pump_image={{`${{matrix.pump}}`}}{{- end }}
          {{ if ne .Name "tyk-sink" -}}tyk_sink_image={{`${{matrix.sink}}`}}{{- end }}
          # base dir for config files
          confs_dir=./pro-ha
          # pick database to use
          env_file=local-{{`${{ matrix.db }}`}}.env" > versions.env
          printf '::group::versions\n%s\n::endgroup::' "$(cat versions.env)"
          # Add Tyk component config variations to $env_file
          cat confs/{{`${{ matrix.conf }}`}}.env >> local-{{`${{ matrix.db }}`}}.env
          # bring up env, the project name is important
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile master-datacenter up --quiet-pull -d
          ./dash-bootstrap.sh http://localhost:3000
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile slave-datacenter up --quiet-pull -d					
{{ end }}