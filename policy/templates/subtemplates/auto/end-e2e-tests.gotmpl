{{ define "end-e2e-tests" }}
      - name: Generate metadata
        if: always() && steps.test_execution.outcome != 'skipped'
        id: metadata_report
        env:
          REPORT_NAME: {{`${{ github.repository }}`}}_{{`${{ github.run_id }}`}}_{{`${{ github.run_attempt }}`}}-{{`${{steps.test_execution.outputs.id}}`}}
        run: |
          # Generate metadata report
          echo "[metadata]
          repo = {{`${{ github.repository }}`}}
          branch = {{`${{ github.ref }}`}}
          commit = {{`${{ github.sha }}`}}
          test_suite_version = {{`${{ needs.test-controller-{{ $testsuite }}.outputs.gd_tag }}`}}
          test_suite_name = {{`${{ github.job }}`}}
          test_suite_run = {{`${{ github.run_id }}`}}-{{`${{ github.run_attempt }}`}}
          db = {{`${{ matrix.db }}`}}
          conf = {{`${{ matrix.conf }}`}}
          pump_compatibility = {{`${{ matrix.pump }}`}}
          sink_compatibility = {{`${{ matrix.sink }}`}}
          " > ${METADATA_REPORT_PATH}
          # Print metadata report
          if [[ "{{`${{ runner.debug }}`}}" == "1" ]]; then
            echo "::group::metadata report"
            cat ${METADATA_REPORT_PATH}
            echo "::endgroup::"
          fi
          #Upload xunit report
          aws s3 cp ${XUNIT_REPORT_PATH}  s3://assets.dev.tyk.technology/testreports/${REPORT_NAME#*/}.xml
          #Upload metadata report
          aws s3 cp ${METADATA_REPORT_PATH} s3://assets.dev.tyk.technology/testreports/${REPORT_NAME#*/}.metadata.toml

      - name: Docker logs for all components
        if: failure() && (steps.test_execution.outcome != 'success' || steps.env_up.outcome != 'success')
        working-directory: auto
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          TYK_DB_LICENSEKEY: {{`${{ secrets.DASH_LICENSE }}`}}
          TYK_MDCB_LICENSE: {{`${{ secrets.MDCB_LICENSE }}`}}
          ECR: {{`${{ steps.ecr.outputs.registry }}`}}
          VERSIONS: {{`${{ needs.test-controller-{{ $testsuite }}.outputs.versions }}`}}
        run: |
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile all logs | sort > {{`${{ github.workspace }}`}}/docker-compose.log
          echo "::group::DockerLogs"
          cat {{`${{ github.workspace }}`}}/docker-compose.log
          echo "::endgroup::"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: failure() && (steps.test_execution.outcome != 'success' || steps.env_up.outcome != 'success')
        with:
          name: docker-compose-logs-{{`${{ github.job }}`}}-{{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}}-{{`${{ github.run_id }}`}}
          path: {{`${{ github.workspace }}`}}/docker-compose.log
          retention-days: 3
          overwrite: true

      - name: Archive Integration tests report
        if: always() 
        uses: actions/upload-artifact@v4
        with:
            name: api-test-report-{{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}}-{{`${{ github.run_id }}`}}
            retention-days: 3
            path: {{`${{ github.workspace }}`}}/reports
            overwrite: true

      - name: Fetch commit author
        if: failure() && steps.test_execution.outcome != 'success' && github.event_name == 'push'
        env:
          USER_EMAIL: {{`${{ needs.goreleaser.outputs.commit_author }}`}}
        run: echo "GIT_USER_EMAIL=$USER_EMAIL" >> $GITHUB_ENV

      - name: Fetch slack user
        if: failure() && steps.test_execution.outcome != 'success' && github.event_name == 'push'
        id: fetch_slack_user
        uses: TykTechnologies/github-actions/.github/actions/github-to-slack@main
        with:
          github_email: {{`${{ env.GIT_USER_EMAIL }}`}}

      - name: Notify slack
        if: failure() && steps.test_execution.outcome != 'success' && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: {{`${{ secrets.API_TEST_ALERT_SLACK_WEBHOOK }}`}}
          SLACK_COLOR: {{`${{ job.status }}`}}
          SLACK_TITLE: "Result: {{`${{ steps.test_execution.outcome }}`}}"
          SLACK_USERNAME: API INTEGRATION TESTS
          SLACK_MESSAGE: "*Test*: {{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}}, *Author*: {{`${{ steps.fetch_slack_user.outputs.slack-user-name }}`}}"
          SLACK_FOOTER: "<https://github.com/{{`${{ github.repository }}`}}/actions/runs/{{`${{ github.run_id }}`}}|SEE EXECUTION DETAILS HERE>"
{{ end }}