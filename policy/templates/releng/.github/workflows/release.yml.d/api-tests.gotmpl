{{ define "api-tests" }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::754489498669:role/ecr_rw_tyk
          role-session-name: cipush
          aws-region: eu-central-1

      - id: ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
          mask-aws-account-id: 'true'

        # Only {{`${{ github.actor }}`}} has access
        # See https://github.com/mxschmitt/action-tmate#use-registered-public-ssh-keys

      - name: Setup tmate session only in debug mode
        uses: mxschmitt/action-tmate@v3
        if: {{`${{ runner.debug == '1' }}`}}
        with:
          detached: true
          limit-access-to-actor: true

      - name: fetch env from tyk-ci
        env:
          GH_TOKEN: {{`${{ github.token }}`}}
        run: |
          gh release download v1.2 --repo github.com/TykTechnologies/tyk-ci -O env.tgz
          tar xzvf env.tgz

      - name: env up
        shell: bash
        working-directory: auto
        id: env_up
        env:
          t: {{`${{ needs.goreleaser.outputs.tags }}`}}
          pull_policy: 'if_not_present'
          # default tag to use
          default_image_tag: {{`${{ startsWith(github.ref_name, 'release-') && github.ref_name || 'master' }}`}}
          GH_TOKEN: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          TYK_DB_LICENSEKEY: {{`${{ secrets.DASH_LICENSE }}`}}
          TYK_MDCB_LICENSE: {{`${{ secrets.MDCB_LICENSE }}`}}
        run: |
          echo CI tags: $t
          tags=($t)
          echo First tag: ${tags[0]}
          # Start customising the env
          echo "registry={{`${{ steps.ecr.outputs.registry }}`}}
          tyk_image=\${registry}/tyk:${default_image_tag}
          tyk_analytics_image=\${registry}/tyk-analytics:${default_image_tag}
          tyk_sink_image=\${registry}/tyk-sink:${default_image_tag}
          tyk_pump_image=\${registry}/tyk-pump:${default_image_tag}
          # override default above with just built tag
          {{ .Name | replace "-" "_" }}_image=${tags[0]}
          # alfa and beta have to come after the override
          tyk_alfa_image=\${tyk_image}
          tyk_beta_image=\${tyk_image}
          # base dir for config files
          confs_dir=./pro-ha
          # pick database to use
          env_file=local-{{`${{ matrix.db }}`}}.env
          " > versions.env
          # Add Tyk component config variations to $env_file
          cat confs/{{`${{ matrix.conf }}`}}.env >> local-{{`${{ matrix.db }}`}}.env
          # bring up env, the project name is important
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile master-datacenter up --quiet-pull -d
          ./dash-bootstrap.sh http://localhost:3000
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile slave-datacenter up --quiet-pull -d

      - name: Run tests
        working-directory: auto
        id: test_execution
        run: |
          echo "## API tests {{`${{ matrix.db }} ${{ matrix.conf }}`}}" >> $GITHUB_STEP_SUMMARY
          if docker run --rm --network auto_default --env-file pytest.env -v {{`${{ github.workspace }}`}}/reports:/app/reports \
             {{`${{ steps.ecr.outputs.registry }}/tyk-automated-tests:${{ startsWith(github.ref_name, 'release-') && github.ref_name || 'master' }}`}} \
             pytest -c pytest_ci.ini --ci -m "not local and not dind {{`${{ matrix.markers }}`}}" > tests.out; then
               echo "All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
               echo "::error title=API tests {{`${{ matrix.db }} ${{ matrix.conf }}`}}::Test execution failed"
               cat tests.out >> $GITHUB_STEP_SUMMARY
               docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env logs tyk tyk-analytics
               exit 1
          fi

      - name: Archive Integration tests report
        if: {{`${{ always() }}`}} 
        uses: actions/upload-artifact@v3
        with:
            name: api-test-report
            retention-days: 3
            path: {{`${{ github.workspace }}`}}/reports

      - name: Fetch commit author
        if: {{`${{ steps.test_execution.outcome != 'success' && !github.event.pull_request.draft }}`}}            
        run: echo "GIT_USER_EMAIL=$(git show -s --format='%ae' HEAD)" >> $GITHUB_ENV

      - name: Fetch slack user
        if: {{`${{ steps.test_execution.outcome != 'success' && !github.event.pull_request.draft }}`}}   
        id: fetch_slack_user
        uses: TykTechnologies/github-actions/.github/actions/github-to-slack@main
        with:
          github_email: {{`${{ env.GIT_USER_EMAIL }}`}}

      - name: Notify slack
        if: {{`${{ steps.test_execution.outcome != 'success' && !github.event.pull_request.draft }}`}}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: {{`${{ secrets.API_TEST_ALERT_SLACK_WEBHOOK }}`}}
          SLACK_COLOR: {{`${{ job.status }}`}}
          SLACK_TITLE: "Result: {{`${{ steps.test_execution.outcome }}`}}"
          SLACK_USERNAME: API INTEGRATION TESTS
          SLACK_MESSAGE: "*Test*: {{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}}, *Author*: {{`${{ steps.fetch_slack_user.outputs.slack-user-name }}`}}"
          SLACK_FOOTER: "<https://github.com/{{`${{ github.repository }}`}}/actions/runs/{{`${{ github.run_id }}`}}|SEE EXECUTION DETAILS HERE>"

      - name: Comment on PR
        if: {{`${{ always() && !github.event.pull_request.draft }}`}}
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            **API tests result - {{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}} env: {{`${{ steps.test_execution.outcome }}`}}** {{`${{ env.STATUS }}`}} 
            Branch used: {{`${{ github.ref }}`}}
            Commit: {{`${{ github.event.after }}`}} {{`${{ github.event.commits[0].message }}`}}
            Triggered by: {{`${{ github.event_name }}`}} (@{{`${{ github.actor }}`}})
            [Execution page](https://github.com/{{`${{ github.repository }}`}}/actions/runs/{{`${{ github.run_id }}`}})
          repo-token: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          message-id: {{`${{ matrix.db }}-${{ matrix.conf }}`}}
        env:
          STATUS: "{{`${{ steps.test_execution.outcome == 'success' && ':white_check_mark:' || ':no_entry_sign:' }}`}}"
{{ end }}
