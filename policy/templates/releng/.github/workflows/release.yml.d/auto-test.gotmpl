{{ define "auto-test" }}
{{ if has "api-test" .Branchvals.Features }}
  test-controller-api:
    needs: goreleaser
    runs-on: ubuntu-latest-m-2
    container: tykio/gromit:v1.7
    outputs:
      conf: {{`${{ steps.params.outputs.api_conf }}`}}
      db: {{`${{ steps.params.outputs.api_db }}`}}
      pump: {{`${{ steps.params.outputs.pump }}`}}
      sink: {{`${{ steps.params.outputs.sink }}`}}
      gd_tag: {{`${{ steps.params.outputs.gd_tag }}`}}
      versions: {{`${{ steps.params.outputs.versions }}`}}
      exclude: {{`${{ steps.params.outputs.exclude }}`}}

    steps:
      - name: set params
        id: params
        env:
          REPO: {{`${{ github.repository }}`}}
          # Cover pull_request_target too
          BASE_REF: {{`${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref}}`}}
          TAGS: {{`${{ needs.goreleaser.outputs.tags }}`}}
          IS_PR: {{`${{startsWith(github.event_name, 'pull_request') && 'yes' }}`}}
          IS_TAG: {{`${{startsWith(github.ref, 'refs/tags') && 'yes' }}`}}
          JOB: api
        run: gromit policy controller --loglevel debug | tee -a "$GITHUB_OUTPUT"
{{ end }}
{{ if has "ui-test" .Branchvals.Features }}
  test-controller-ui:
    needs: goreleaser
    runs-on: ubuntu-latest-m-2
    container: tykio/gromit:v1.7
    outputs:
      conf: {{`${{ steps.params.outputs.ui_conf }}`}}
      db: {{`${{ steps.params.outputs.ui_db }}`}}
      pump: {{`${{ steps.params.outputs.pump }}`}}
      sink: {{`${{ steps.params.outputs.sink }}`}}
      gd_tag: {{`${{ steps.params.outputs.gd_tag }}`}}
      versions: {{`${{ steps.params.outputs.versions }}`}}
      exclude: {{`${{ steps.params.outputs.exclude }}`}}

    steps:
      - name: set params
        id: params
        env:
          REPO: {{`${{ github.repository }}`}}
          # Cover pull_request_target too
          BASE_REF: {{`${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref}}`}}
          TAGS: {{`${{ needs.goreleaser.outputs.tags }}`}}
          IS_PR: {{`${{startsWith(github.event_name, 'pull_request') && 'yes' }}`}}
          IS_TAG: {{`${{startsWith(github.ref, 'refs/tags') && 'yes' }}`}}
          JOB: ui
        run: gromit policy controller --loglevel debug | tee -a "$GITHUB_OUTPUT"
{{ end }}

  auto-tests:   
    needs: 
      - goreleaser
{{ if has "api-test" .Branchvals.Features }}  
      - test-controller-api
{{ end }}
{{ if has "ui-test" .Branchvals.Features }}    
      - test-controller-ui
{{ end }}
    runs-on: ubuntu-latest-m-2
    permissions:
      id-token: write # This is required for requesting the Github JWT
      contents: read # This is required for actions/checkout
    strategy:
      fail-fast: false
      matrix:
        testsuite:
        {{ if has "api-test" .Branchvals.Features }}
            - api
        {{ end }}
        {{ if has "ui-test" .Branchvals.Features }}
            - ui
        {{ end }}
        conf: {{`${{ fromJson(format('needs.test-controller-{0}.outputs.conf', matrix.testsuite)) }}`}}
        db: {{`${{ fromJson(format('needs.test-controller-{0}.outputs.db', matrix.testsuite)) }}`}}
        pump: {{`${{ fromJson(format('needs.test-controller-{0}.outputs.pump', matrix.testsuite)) }}`}}
        sink: {{`${{ fromJson(format('needs.test-controller-{0}.outputs.sink', matrix.testsuite)) }}`}}
        node-version: [18.16]
        include:
          - db: postgres15
            markers: "and not sql"
        exclude: {{`${{ fromJson(format('needs.test-controller-{0}.outputs.exclude', matrix.testsuite)) }}`}}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::754489498669:role/ecr_rw_tyk
          role-session-name: cipush
          aws-region: eu-central-1
      - id: ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
          # Only {{`${{ github.actor }}`}} has access
          # See https://github.com/mxschmitt/action-tmate#use-registered-public-ssh-keys
      - name: Setup tmate session only in debug mode
        uses: mxschmitt/action-tmate@v3
        if: {{`${{ runner.debug == '1' }}`}}
        with:
          detached: true
          limit-access-to-actor: true
      - name: fetch env from tyk-ci
        env:
          GH_TOKEN: {{`${{ github.token }}`}}
        run: |
          gh release download --repo github.com/TykTechnologies/tyk-ci -p 'ci-env.tgz' -O env.tgz
          tar xzvf env.tgz
      - name: env up
        shell: bash
        working-directory: auto
        id: env_up
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          TYK_DB_LICENSEKEY: {{`${{ secrets.DASH_LICENSE }}`}}
          TYK_MDCB_LICENSE: {{`${{ secrets.MDCB_LICENSE }}`}}
          ECR: {{`${{ steps.ecr.outputs.registry }}`}}
          VERSIONS: {{`${{ format('needs.test-controller-{0}.outputs.versions', matrix.testsuite) }}`}}
        run: |
          echo "ECR=${ECR}
          $VERSIONS
          tyk_pump_image={{`${{matrix.pump}}`}}
          tyk_sink_image={{`${{matrix.sink}}`}}
          confs_dir=./pro-ha
          env_file=local-{{`${{ matrix.db }}`}}.env" > versions.env
          echo "::group::versions"
          cat versions.env
          echo "::endgroup::"
          # Add Tyk component config variations to $env_file
          cat confs/{{`${{ matrix.conf }}`}}.env >> local-{{`${{ matrix.db }}`}}.env
          # bring up env, the project name is important
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile master-datacenter up --quiet-pull -d
          ./dash-bootstrap.sh http://localhost:3000
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile slave-datacenter up --quiet-pull -d

      {{ if has "api-test" .Branchvals.Features }}
      - name: Run tests
        working-directory: auto
        id: REPLACE_THIS_test_execution
        run: |
          # Generate report id
          echo "id=$(date +%s%N)" >> $GITHUB_OUTPUT
          # Run tests        
          set -o pipefail
          echo "### API tests {{`${{ matrix.db }}`}} {{`${{ matrix.conf }}`}}" >> $GITHUB_STEP_SUMMARY
          if docker run --rm --network auto_default --env-file pytest.env -v {{`${{ github.workspace }}`}}/reports:/app/reports \
             {{`${{ steps.ecr.outputs.registry }}`}}/tyk-automated-tests:{{`${{ needs.test-controller-`}}REPLACE_THIS{{`.outputs.gd_tag }}`}} \
             pytest -c pytest_ci.ini --junitxml=./${XUNIT_REPORT_PATH#"{{`${{ github.workspace }}`}}"} --ci -m "not local and not dind {{`${{ matrix.markers }}`}}" | tee tests.out; then
               echo "All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
               echo "::error title=API tests {{`${{ matrix.db }}`}} {{`${{ matrix.conf }}`}}::Test execution failed"
               cat tests.out >> $GITHUB_STEP_SUMMARY
               exit 1
          fi      
      {{ else if has "ui-test" .Branchvals.Features }}
      - name: Install Node.js {{`${{ matrix.node-version }}`}}
        uses: actions/setup-node@v2.4.1
        with:
          node-version: {{`${{ matrix.node-version }}`}}  
      - name: Fix private module deps
        env:
          TOKEN: '{{`${{ secrets.ORG_GH_TOKEN }}`}}'
        run: >
          git config --global url."https://${TOKEN}@github.com".insteadOf "https://github.com"                    
      - name: Checkout of Dashboard
        uses: actions/checkout@v4
        with:
          ref: {{`${{ github.event.pull_request.head.sha }}`}}
          fetch-depth: 1
          token: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          sparse-checkout: |
            tests/ui
            bin
          submodules: false    
      - name: Install test dependecies
        run: |
          npm ci
        working-directory: tests/ui
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: tests/ui
      - name: Execute UI tests
        id: REPLACE_THIS_test_execution
        run: |
          npm run test
        working-directory: tests/ui
        env:
          GW_URL: 'https://localhost:8080/'
          NODE_TLS_REJECT_UNAUTHORIZED: 0
          SLACK_AUTH_TOKEN: {{`${{ secrets.UI_SLACK_AUTH_TOKEN }}`}}
          EVENT_TRIGGER: {{`${{ github.event_name }}`}} ({{`${{ github.actor }}`}})
          JOB_RUN_ID: {{`${{ github.run_id }}`}}
          JOB_NAME: tyk-analytics - {{`${{ github.ref }}`}} {{`${{ github.event.head_commit.message }}`}}
          RUN_ID: 'tyk-analytics/{{`${{ github.run_id }}`}}'

      - name: Upload Playwright Test Report to S3
        if: failure() && steps.REPLACE_THIS_test_execution.outcome != 'success' && steps.env_up.outcome == 'success'
        run:
          npm run upload_report_to_s3
        env:
          AWS_ACCESS_KEY_ID: {{`${{ secrets.UI_AWS_ACCESS_KEY_ID }}`}}
          AWS_SECRET_ACCESS_KEY: {{`${{ secrets.UI_AWS_SECRET_ACCESS_KEY }}`}}
          RUN_ID: 'tyk-analytics/{{`${{ github.run_id }}`}}'
        working-directory: tests/ui

      - name: Post message to automation team
        if: failure() && steps.REPLACE_THIS_test_execution.outcome != 'success' && !github.event.pull_request.draft 
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: '@konrad'
          slack-message: "GitHub build result: {{`${{ job.status }}`}}\n{{`${{ github.event.pull_request.html_url || github.event.head_commit.url }}`}}"
        env:
          SLACK_BOT_TOKEN: {{`${{ secrets.UI_SLACK_AUTH_TOKEN }}`}}

      - name: Share S3 report link into summary
        if: always() && !github.event.pull_request.draft
        run: |
          echo "# :clipboard: S3 REPLACE_THIS Test REPORT: {{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: {{`${{ steps.REPLACE_THIS_test_execution.outcome == 'success' && ':white_check_mark:' || ':no_entry_sign:' }}`}}" >> $GITHUB_STEP_SUMMARY
          echo "- [Link to report](https://tyk-qa-reports.s3.eu-central-1.amazonaws.com/tyk-analytics/{{`${{ github.run_id }}`}}/index.html)" >> $GITHUB_STEP_SUMMARY
  
      - name: Xray update
        if: {{`${{ always() }}`}} && github.event_name != 'pull_request'
        run: |
          ./update_xray.sh
        working-directory: bin
        env:
          TEST: "QA-890"
          STATUS: "{{`${{ steps.`}}REPLACE_THIS{{`_test_execution.outcome }}`}}"
          CLIENT_ID: {{`${{secrets.XRAY_CLIENT_ID}}`}}
          CLIENT_SECRET: {{`${{secrets.XRAY_CLIENT_SECRET}}`}}
          BRANCH: {{`${{ github.ref }}`}}
      {{ end }} {{/* end of test variation */}}
      - name: Docker logs for all components
        if: failure() && (steps.REPLACE_THIS_test_execution.outcome != 'success' || steps.env_up.outcome != 'success')
        working-directory: auto
        env:
          pull_policy: 'if_not_present'
          GH_TOKEN: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          TYK_DB_LICENSEKEY: {{`${{ secrets.DASH_LICENSE }}`}}
          TYK_MDCB_LICENSE: {{`${{ secrets.MDCB_LICENSE }}`}}
          ECR: {{`${{ steps.ecr.outputs.registry }}`}}
          VERSIONS: {{`${{ needs.test-controller-`}}REPLACE_THIS{{`.outputs.versions}}`}}
        run: |
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile all logs | sort > {{`${{ github.workspace }}`}}/docker-compose-REPLACE_THIS.log
          echo "::group::DockerLogs"
          cat {{`${{ github.workspace }}`}}/docker-compose-REPLACE_THIS.log
          echo "::endgroup::"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: failure() && (steps.REPLACE_THIS_test_execution.outcome != 'success' || steps.env_up.outcome != 'success')
        with:
          name: docker-compose-logs-REPLACE_THIS-{{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}}-{{`${{ github.run_id }}`}}
          path: {{`${{ github.workspace }}`}}/docker-compose-REPLACE_THIS.log
          retention-days: 3
          overwrite: true
      - name: Archive Integration tests report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: REPLACE_THIS-test-report-{{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}}-{{`${{ github.run_id }}`}}
          retention-days: 3
          path: {{`${{ github.workspace }}`}}/reports
          overwrite: true
      - name: Fetch commit author
        if: failure() && steps.test_execution.outcome != 'success' && github.event_name == 'push'
        env:
          USER_EMAIL: {{`${{ needs.goreleaser.outputs.commit_author }}`}}
        run: echo "GIT_USER_EMAIL=$USER_EMAIL" >> $GITHUB_ENV
      - name: Fetch slack user
        if: failure() && steps.test_execution.outcome != 'success' && github.event_name == 'push'
        id: fetch_slack_user
        uses: TykTechnologies/github-actions/.github/actions/github-to-slack@main
        with:
          github_email: {{`${{ env.GIT_USER_EMAIL }}`}}
      - name: Notify slack
        if: failure() && steps.test_execution.outcome != 'success' && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: {{`${{ secrets.API_TEST_ALERT_SLACK_WEBHOOK }}`}}
          SLACK_COLOR: {{`${{ job.status }}`}}
          SLACK_TITLE: "Result: {{`${{ steps.test_execution.outcome }}`}}"
          SLACK_USERNAME: API INTEGRATION TESTS
          SLACK_MESSAGE: "*Test*: {{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}}, *Author*: {{`${{ steps.fetch_slack_user.outputs.slack-user-name }}`}}"
          SLACK_FOOTER: "<https://github.com/{{`${{ github.repository }}`}}/actions/runs/{{`${{ github.run_id }}`}}|SEE EXECUTION DETAILS HERE>"                                       
{{ end }} {{/* end of define */}}