{{ define "tests" }}
  upgrade-deb:
    if: startsWith(github.ref, 'refs/tags') && !github.event.pull_request.draft
    runs-on: ubuntu-latest
    needs: goreleaser
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
        distro:
        {{- if (has "go1.19" .Branchvals.Features) }}
          - ubuntu:jammy
        {{- end }}
        {{- if (has "el7" .Branchvals.Features) }}
          - ubuntu:xenial
        {{- end }}
          - ubuntu:bionic
          - ubuntu:focal
          - debian:bullseye

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: actions/download-artifact@v3
        with:
          name: deb

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - name: generate dockerfile
        run: |
          echo 'FROM ${{`{{ matrix.distro }}`}}
          ARG TARGETARCH
          COPY {{ .PackageName }}*_${TARGETARCH}.deb /{{ .PackageName }}.deb
          RUN apt-get update && apt-get install -y curl
  {{- if .Branchvals.PCPrivate }}
          RUN curl -u ${{`{{ secrets.PACKAGECLOUD_MASTER_TOKEN }}`}}: -fsSL https://packagecloud.io/install/repositories/tyk/{{ .PCRepo }}/script.deb.sh | bash && apt-get install -y {{ .PackageName }}={{ .Branchvals.UpgradeFromVer }}
  {{- else }}
          RUN curl -fsSL https://packagecloud.io/install/repositories/tyk/{{ .PCRepo }}/script.deb.sh | bash && apt-get install -y {{ .PackageName }}={{ .Branchvals.UpgradeFromVer }}
  {{- end }}
          RUN dpkg -i {{ .PackageName }}.deb
  {{- if eq .Name "tyk" }}
          RUN apt-get install -y jq
          RUN /opt/tyk-gateway/install/setup.sh --listenport=8080 --redishost=localhost --redisport=6379 --domain=""
          COPY ci/tests/api-functionality/api_test.sh /
          COPY ci/tests/api-functionality/pkg_test.sh /
          COPY ci/tests/api-functionality/data/api.json /opt/tyk-gateway/apps/
          CMD [ "/pkg_test.sh" ]
  {{- end }}
          ' > Dockerfile

      - name: install on ${{`{{ matrix.distro }}`}}
        uses: docker/build-push-action@v4
        with:
          context: "."
          platforms: linux/${{`{{ matrix.arch }}`}}
          file: Dockerfile
          push: false
  {{- if eq .Name "tyk" }}
          tags: test-${{`{{ matrix.distro }}-${{ matrix.arch }}`}}
          load: true

      - name: Test the built container image with api functionality test.
        run: |
          docker run --rm test-${{`{{ matrix.distro }}-${{ matrix.arch }}`}}
  {{- end }}

  upgrade-rpm:
    if: startsWith(github.ref, 'refs/tags') && !github.event.pull_request.draft
    needs: goreleaser
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro:
        {{- if (has "go1.19" .Branchvals.Features) }}
          - ubi9/ubi
        {{- end }}
        {{- if (has "el7" .Branchvals.Features) }}
          - ubi7/ubi
        {{- end }}
          - ubi8/ubi

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: actions/download-artifact@v3
        with:
          name: rpm

      - uses: docker/setup-buildx-action@v2

      - name: generate dockerfile
        run: |
          echo 'FROM registry.access.redhat.com/${{`{{ matrix.distro }}`}}
          COPY {{ .PackageName }}*.x86_64.rpm /{{ .PackageName }}.rpm
          RUN yum install --allowerasing -y curl

  {{- if .Branchvals.PCPrivate }}
          RUN curl -u ${{`{{ secrets.PACKAGECLOUD_MASTER_TOKEN }}`}}: -s https://packagecloud.io/install/repositories/tyk/{{ .PCRepo }}/script.rpm.sh | bash && yum install -y {{ .PackageName }}-{{ .Branchvals.UpgradeFromVer }}-1

  {{- else }}
          RUN curl -fsSL https://packagecloud.io/install/repositories/tyk/{{ .PCRepo }}/script.rpm.sh | bash && yum install -y {{ .PackageName }}-{{ .Branchvals.UpgradeFromVer }}-1

  {{- end }}
          RUN curl https://keyserver.tyk.io/tyk.io.rpm.signing.key.2020 -o {{ .PCRepo }}.key && rpm --import {{ .PCRepo }}.key
          RUN rpm --checksig {{ .PackageName }}.rpm
          RUN rpm -Uvh --force {{ .PackageName }}.rpm
  {{- if eq .Name "tyk" }}
          RUN curl -fSL https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 --output /usr/local/bin/jq && chmod a+x /usr/local/bin/jq
          RUN /opt/tyk-gateway/install/setup.sh --listenport=8080 --redishost=localhost --redisport=6379 --domain=""
          COPY ci/tests/api-functionality/data/api.json /opt/tyk-gateway/apps/
          COPY ci/tests/api-functionality/api_test.sh /
          COPY ci/tests/api-functionality/pkg_test.sh /
          CMD [ "/pkg_test.sh" ]
  {{- end }}
          ' > Dockerfile

      - name: install on ${{`{{ matrix.distro }}`}}
        uses: docker/build-push-action@v4
        with:
          context: "."
          file: Dockerfile
          push: false
  {{- if eq .Name "tyk" }}
          tags: test-${{`{{ matrix.distro }}`}}
          load: true

      - name: Test the built container image with api functionality test.
        run: |
          docker run --rm test-${{`{{ matrix.distro }}`}}
  {{- end }}

  smoke-tests:
    if: startsWith(github.ref, 'refs/tags') && !github.event.pull_request.draft
    needs:
      - goreleaser
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Run tests
        shell: bash
        env:
          GITHUB_TAG: ${{`{{ github.ref }}`}}
  {{- if or (eq .Name "tyk-analytics") (eq .Name "tyk-sink") }}
          TYK_DB_LICENSEKEY: ${{`{{ secrets.DASH_LICENSE }}`}}
  {{- if eq .Name "tyk-sink" }}
          TYK_MDCB_LICENSE: ${{`{{ secrets.MDCB_LICENSE }}`}}
  {{- end }}        
  {{- end }}
        run: |
          set -eaxo pipefail
          if [ ! -d smoke-tests ]; then
             echo "::warning No repo specific smoke tests defined"
          fi
          if [ ! -d ci/tests ]; then
             echo "::warning No ci tests defined"
             exit 0
          fi
          for d in ci/tests/*/
          do
              echo Attempting to test $d
              if [ -d $d ] && [ -e $d/test.sh ]; then
                  cd $d
                  ./test.sh ${{`{{ needs.goreleaser.outputs.tag }}`}}
                  cd -
              fi
          done
          for d in smoke-tests/*/
          do
              echo Attempting to test $d
              if [ -d $d ] && [ -e $d/test.sh ]; then
                  cd $d
                  ./test.sh ${{`{{ needs.goreleaser.outputs.tag }}`}}
                  cd -
              fi
          done
{{ end }}
