{{ define "tests" }}
  api-tests:
    needs: goreleaser
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    strategy:
      fail-fast: false
      matrix:
        conf: [ "sha256", "murmur64" ]
        db: [ "mongo44", "postgres15" ]
        include:
          - db: postgres15
            markers: "and not sql"

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
  {{- if eq .Name "tyk-analytics" }}
          submodules: false
  {{- end }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::754489498669:role/ecr_rw_tyk
          role-session-name: cipush
          aws-region: eu-central-1

      - id: ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

        # Only {{`${{ github.actor }}`}} has access
        # See https://github.com/mxschmitt/action-tmate#use-registered-public-ssh-keys
      - name: Setup tmate session only in debug mode
        uses: mxschmitt/action-tmate@v3
        if: {{`${{ runner.debug == '1' }}`}}
        with:
          detached: true
          limit-access-to-actor: true

      - name: env up
        shell: bash
        env:
          t: {{`${{ needs.goreleaser.outputs.tags }}`}}
          # gw and dash use the same branch names
          gw_dash_image_tag: {{`${{ ( (github.repository == 'TykTechnologies/tyk' || github.repository == 'TykTechnologies/tyk-analytics') && startsWith(github.ref_name, 'release-') ) && github.ref_name || 'master' }}`}}
          pump_image_tag: {{`${{ ( github.repository == 'TykTechnologies/tyk-pump' && startsWith(github.ref_name, 'release-') ) && github.ref_name || 'master' }}`}}
          sink_image_tag: {{`${{ ( github.repository == 'TykTechnologies/tyk-sink' && startsWith(github.ref_name, 'release-') ) && github.ref_name || 'master' }}`}}
          GH_TOKEN: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          TYK_DB_LICENSEKEY: {{`${{ secrets.DASH_LICENSE }}`}}
          TYK_MDCB_LICENSE: {{`${{ secrets.MDCB_LICENSE }}`}}
        run: |
          echo CI tags: $t
          tags=($t)
          echo First tag: ${tags[0]}
          # Get the ci test env in a temp dir
          cd $(mktemp -d autoXXX)
          gh release download v1 --pattern '*.tgz' -R TykTechnologies/tyk-ci
          tar --strip-components=1 -xvf ci-env.tgz
          # Start customising the env
          echo "registry={{`${{ steps.ecr.outputs.registry }}`}}
          tyk_image=\${registry}/tyk:${gw_dash_image_tag}
          tyk_analytics_image=\${registry}/tyk-analytics:${gw_dash_image_tag}
          tyk_sink_image=\${registry}/tyk-sink:${sink_image_tag}
          tyk_pump_image=\${registry}/tyk-pump:${pump_image_tag}
          # override default above with just built tag
          {{ .Name | replace "-" "_" }}_image=${tags[0]}
          # base dir for config files
          confs_dir=./pro
          # pick database to use
          env_file=local-{{`${{ matrix.db }}`}}.env
          " > versions.env
          # Add Tyk component config variations to $env_file
          cat confs/{{`${{ matrix.conf }}`}}.env >> local-{{`${{ matrix.db }}`}}.env
          # bring up env, project name explicitly set as the network name depends on it
          docker compose -p auto -f pro.yml -f deps.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env up --quiet-pull -d

      - name: Run tests
        run: |
          docker run --rm --network auto_default \
          {{`${{ steps.ecr.outputs.registry }}`}}/tyk-automated-tests:{{`${{ startsWith(github.ref_name, 'release-') && github.ref_name || 'master' }}`}} \
          pytest -c pytest_ci.ini -m "not local and not mdcb and not dind {{`${{ matrix.markers }}`}}"

# TODO: PR comment, using just one comment and updating, not a new comment each time

  upgrade-deb:
    if: startsWith(github.ref, 'refs/tags')
    services:
      httpbin.org:
        image: kennethreitz/httpbin
    runs-on: ubuntu-latest
    needs: goreleaser
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
        distro:
        {{- if (has "go1.19" .Branchvals.Features) }}
          - ubuntu:jammy
        {{- end }}
        {{- if (has "el7" .Branchvals.Features) }}
          - ubuntu:xenial
        {{- end }}
          - ubuntu:bionic
          - ubuntu:focal
          - debian:bullseye
          - debian:bookworm

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: actions/download-artifact@v3
        with:
          name: deb

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - name: generate dockerfile
        run: |
          echo 'FROM {{`${{ matrix.distro }}`}}
          ARG TARGETARCH
          COPY {{ .PackageName }}*_${TARGETARCH}.deb /{{ .PackageName }}.deb
          RUN apt-get update && apt-get install -y curl
  {{- if .Branchvals.PCPrivate }}
          RUN curl -u {{`${{ secrets.PACKAGECLOUD_MASTER_TOKEN }}`}}: -fsSL https://packagecloud.io/install/repositories/tyk/{{ .PCRepo }}/script.deb.sh | bash && apt-get install -y {{ .PackageName }}={{ .Branchvals.UpgradeFromVer }}
  {{- else }}
          RUN curl -fsSL https://packagecloud.io/install/repositories/tyk/{{ .PCRepo }}/script.deb.sh | bash && apt-get install -y {{ .PackageName }}={{ .Branchvals.UpgradeFromVer }}
  {{- end }}
          RUN dpkg -i {{ .PackageName }}.deb
  {{- if eq .Name "tyk" }}
          RUN apt-get install -y jq
          RUN /opt/tyk-gateway/install/setup.sh --listenport=8080 --redishost=localhost --redisport=6379 --domain=""
          COPY ci/tests/api-functionality/api_test.sh /
          COPY ci/tests/api-functionality/pkg_test.sh /
          COPY ci/tests/api-functionality/data/api.json /opt/tyk-gateway/apps/
          CMD [ "/pkg_test.sh" ]
  {{- end }}
          ' > Dockerfile

      - name: install on {{`${{ matrix.distro }}`}}
        uses: docker/build-push-action@v4
        with:
          context: "."
          platforms: linux/{{`${{ matrix.arch }}`}}
          file: Dockerfile
          push: false
  {{- if eq .Name "tyk" }}
          tags: test-{{`${{ matrix.distro }}-${{ matrix.arch }}`}}
          load: true

      - name: Test the built container image with api functionality test.
        run: |
          docker run --network {{`${{ job.container.network }}`}} --rm test-{{`${{ matrix.distro }}-${{ matrix.arch }}`}}
  {{- end }}

  upgrade-rpm:
    if: startsWith(github.ref, 'refs/tags')
    services:
      httpbin.org:
        image: kennethreitz/httpbin
    needs: goreleaser
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro:
          - amazonlinux:2023
        {{- if (has "go1.19" .Branchvals.Features) }}
          - registry.access.redhat.com/ubi9/ubi
        {{- end }}
        {{- if (has "el7" .Branchvals.Features) }}
          - amazonlinux:2
          - registry.access.redhat.com/ubi7/ubi
        {{- end }}
          - registry.access.redhat.com/ubi8/ubi

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: actions/download-artifact@v3
        with:
          name: rpm

      - uses: docker/setup-buildx-action@v2

      - name: generate dockerfile
        run: |
          echo 'FROM {{`${{ matrix.distro }}`}}
          COPY {{ .PackageName }}*.x86_64.rpm /{{ .PackageName }}.rpm
          RUN yum install --allowerasing -y curl

  {{- if .Branchvals.PCPrivate }}
          RUN curl -u {{`${{ secrets.PACKAGECLOUD_MASTER_TOKEN }}`}}: -s https://packagecloud.io/install/repositories/tyk/{{ .PCRepo }}/script.rpm.sh | bash && yum install -y {{ .PackageName }}-{{ .Branchvals.UpgradeFromVer }}-1

  {{- else }}
          RUN curl -fsSL https://packagecloud.io/install/repositories/tyk/{{ .PCRepo }}/script.rpm.sh | bash && yum install -y {{ .PackageName }}-{{ .Branchvals.UpgradeFromVer }}-1

  {{- end }}
          RUN curl https://keyserver.tyk.io/tyk.io.rpm.signing.key.2020 -o {{ .PCRepo }}.key && rpm --import {{ .PCRepo }}.key
          RUN rpm --checksig {{ .PackageName }}.rpm
          RUN rpm -Uvh --force {{ .PackageName }}.rpm
  {{- if eq .Name "tyk" }}
          RUN curl -fSL https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 --output /usr/local/bin/jq && chmod a+x /usr/local/bin/jq
          RUN /opt/tyk-gateway/install/setup.sh --listenport=8080 --redishost=localhost --redisport=6379 --domain=""
          COPY ci/tests/api-functionality/data/api.json /opt/tyk-gateway/apps/
          COPY ci/tests/api-functionality/api_test.sh /
          COPY ci/tests/api-functionality/pkg_test.sh /
          CMD [ "/pkg_test.sh" ]
  {{- end }}
          ' > Dockerfile

      - name: install on {{`${{ matrix.distro }}`}}
        uses: docker/build-push-action@v4
        with:
          context: "."
          file: Dockerfile
          push: false
  {{- if eq .Name "tyk" }}
          tags: test-{{`${{ matrix.distro }}`}}
          load: true

      - name: Test the built container image with api functionality test.
        run: |
          docker run --network {{`${{ job.container.network }}`}} --rm test-{{`${{ matrix.distro }}`}}
  {{- end }}

  smoke-tests:
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - goreleaser
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Run tests
        shell: bash
        env:
          GITHUB_TAG: {{`${{ github.ref }}`}}
  {{- if or (eq .Name "tyk-analytics") (eq .Name "tyk-sink") }}
          TYK_DB_LICENSEKEY: {{`${{ secrets.DASH_LICENSE }}`}}
  {{- if eq .Name "tyk-sink" }}
          TYK_MDCB_LICENSE: {{`${{ secrets.MDCB_LICENSE }}`}}
  {{- end }}        
  {{- end }}
        run: |
          set -eaxo pipefail
          if [ ! -d smoke-tests ]; then
             echo "::warning No repo specific smoke tests defined"
          fi
          if [ ! -d ci/tests ]; then
             echo "::warning No ci tests defined"
             exit 0
          fi
          for d in ci/tests/*/
          do
              echo Attempting to test $d
              if [ -d $d ] && [ -e $d/test.sh ]; then
                  cd $d
                  ./test.sh {{`${{ needs.goreleaser.outputs.tag }}`}}
                  cd -
              fi
          done
          for d in smoke-tests/*/
          do
              echo Attempting to test $d
              if [ -d $d ] && [ -e $d/test.sh ]; then
                  cd $d
                  ./test.sh {{`${{ needs.goreleaser.outputs.tag }}`}}
                  cd -
              fi
          done
{{ end }}
