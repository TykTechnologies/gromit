{{ define "aggregator" }}
  aggregator-ci-test:
    name: Aggregated CI Status
    runs-on: ubuntu-latest
    # Dynamically determine which jobs to depend on based on repository configuration
    needs: [
          {{- /* Include goreleaser if the repo has the releng feature */ -}}
          {{- if has "releng" .Branchvals.Features -}}
          goreleaser
          {{- end -}}

          {{- /* Add comma if we have both goreleaser and tests */ -}}
          {{- if and (has "releng" .Branchvals.Features) (not (empty .Branchvals.Tests)) -}}
          ,
          {{- end -}}

          {{- /* Add test jobs */ -}}
          {{- range $index, $test := .Branchvals.Tests -}}
            {{- if $index }}, {{ end -}}
            {{ $test }}-tests
          {{- end -}}
        ]
    if: {{`${{ always() && github.event_name == 'pull_request' }}`}}
    steps:
      - name: Aggregate results
        run: |
          failed=()
          # Get the needs context as JSON once
          needs_json='{{`${{ toJSON(needs) }}`}}'

          # Loop through all jobs in the needs context
          for job in $(echo "$needs_json" | jq -r 'keys[]'); do
            job_result=$(echo "$needs_json" | jq -r --arg job "$job" '.[$job].result')

            if [[ "$job_result" != "success" ]]; then
              failed+=("$job")
            fi
          done

          if (( ${#failed[@]} )); then
            # Join the failed job names with commas
            failed_jobs=$(IFS=", "; echo "${failed[*]}")
            echo "❌ Failed jobs ----- : $failed_jobs"
            exit 1
          fi

          echo "✅ All required jobs succeeded"
{{ end }}