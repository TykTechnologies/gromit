{{ define "smoke-tests" }}
  test-controller-distros:
    if: github.event.pull_request.draft == false
    needs:
      - goreleaser
    runs-on: ubuntu-latest
    outputs:
      deb: {{`${{ steps.params.outputs.deb }}`}}
      rpm: {{`${{ steps.params.outputs.rpm }}`}}
    steps:
      - name: set params
        id: params
        shell: bash
        env:
          # startsWith covers pull_request_target too
          BASE_REF: {{`${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref_name}}`}}
        run: |
          set -eo pipefail
          curl -s --retry 5 --retry-delay 10 --fail-with-body "http://tui.internal.dev.tyk.technology/v2/$VARIATION/{{ .Name }}/$BASE_REF/{{`${{ github.event_name}}`}}/api/Distros.gho" | tee -a "$GITHUB_OUTPUT"
          if ! [[ $VARIATION =~ prod ]];then
            echo "::warning file=.github/workflows/release.yml,line=24,col=1,endColumn=8::Using test variation"
          fi

{{- $uprepo :=  .Branchvals.Builds.std.UpgradeRepo }}

{{ $repo := .Name }}
{{ $pcname := .PackageName }}
{{ $fromVer := .Branchvals.UpgradeFromVer }}
{{ range $distro := list "deb" "rpm" }}
  upgrade-{{ $distro }}:
    services:
      httpbin.org:
        image: kennethreitz/httpbin
    runs-on: ubuntu-latest
    needs:
      - test-controller-distros
    strategy:
      fail-fast: true
      matrix:
        arch:
          - amd64
          - arm64
        distro: {{`${{ fromJson(needs.test-controller-distros.outputs.`}}{{ $distro }}{{`) }}`}}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: ci

      - uses: actions/download-artifact@v4
        with:
          name: {{ $distro }}

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - name: generate dockerfile
        run: |
          echo 'FROM {{`${{ matrix.distro }}`}}
{{- if eq $distro "deb" }}
          ARG TARGETARCH
          COPY {{ $pcname }}*_${TARGETARCH}.deb /{{ $pcname }}.deb
          RUN apt-get update && apt-get install -y curl
          RUN curl -fsSL https://packagecloud.io/install/repositories/tyk/{{ $uprepo }}/script.deb.sh | bash && apt-get install -y {{ $pcname }}={{ $fromVer }}
          RUN dpkg -i /{{ $pcname }}.deb
{{ else if eq $distro "rpm" }}
          ARG RHELARCH
          COPY {{ $pcname }}*.${RHELARCH}.rpm /{{ $pcname }}.rpm
          RUN command -v curl || yum install -y curl
          RUN command -v useradd || yum install -y shadow-utils
          RUN curl -fsSL https://packagecloud.io/install/repositories/tyk/{{ $uprepo }}/script.rpm.sh | bash && yum install -y {{ $pcname }}-{{ $fromVer }}-1
          RUN curl https://keyserver.tyk.io/tyk.io.rpm.signing.key.2020 -o {{ $uprepo }}.key && rpm --import {{ $uprepo }}.key
          RUN rpm --checksig /{{ $pcname }}.rpm
          RUN rpm -Uvh --force /{{ $pcname }}.rpm
{{ end }} {{/* if $distro */}}
{{- if eq $repo "tyk" }}
          RUN /opt/tyk-gateway/install/setup.sh --listenport=8080 --redishost=localhost --redisport=6379 --domain=""
          COPY ci/tests/api-functionality/data/api.json /opt/tyk-gateway/apps/
          CMD ["/opt/tyk-gateway/tyk", "--conf", "/opt/tyk-gateway/tyk.conf"]
{{- end }}
          ' | tee Dockerfile

      - name: install on {{`${{ matrix.distro }}`}}
        uses: docker/build-push-action@v6
        with:
          context: "."
          platforms: linux/{{`${{ matrix.arch }}`}}
          build-args: |
            RHELARCH={{`${{ startsWith(matrix.arch, 'arm64') && 'aarch64' || 'x86_64' }}`}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile
          push: false
  {{- if eq $repo "tyk" }}
          tags: test-{{`${{ matrix.distro }}-${{ matrix.arch }}`}}
          load: true

      - name: Test the built container image with api functionality test.
        run: |
          docker run -d -p8080:8080 --name=test --platform linux/{{`${{ matrix.arch }}`}} --network {{`${{ job.container.network }}`}} --rm test-{{`${{ matrix.distro }}-${{ matrix.arch }}`}}
          sleep 2
          ./ci/tests/api-functionality/api_test.sh
          sleep 2
          docker stop test || true
  {{- end }}
{{- end }} {{/* range distro */}}

  {{- if has "release-test" .Branchvals.Features }}
  release-tests:
    needs:
      - goreleaser
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    uses: ./.github/workflows/release-tests.yml
    secrets: inherit
  {{ end }} {{/* release-test */}}
{{ end }} {{/* smoke-tests */}}
