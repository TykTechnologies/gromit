# Generated by: gromit policy
# Generated on: {{ .Timestamp }}

# Distribution channels covered by this workflow
# - Ubuntu and Debian
# - RHEL and AL
# - docker hub
# - devenv ECR
# - Cloudsmith

name: Release

on:
  pull_request:
  push:
    branches:
      - master
      - release-**
    tags:
      - 'v*'

env:
  GOPRIVATE: github.com/TykTechnologies
  
jobs:
{{- template "goreleaser" . }}
{{- if or (eq .Name "tyk") (eq .Name "tyk-analytics") (eq .Name "tyk-sink") (eq .Name "tyk-pump") }}
  test-controller:
    needs: goreleaser
    runs-on: ubuntu-latest
    outputs:
      matrix: {{`${{ steps.scope.outputs.matrix }}`}}
      gd_tag: {{`${{ steps.versions.outputs.gd_tag }}`}}
      versions: {{`${{ steps.versions.outputs.versions }}`}}

    steps:
      - name: set version
        id: versions
        env:
          GW_OR_DASH: {{`${{ (endsWith(github.repository, 'tyk') || endsWith(github.repository, 'tyk-analytics')) && 'yes' }}`}}
          BASE_REF: {{`${{ startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref }}`}}
          TAGS: {{`${{ needs.goreleaser.outputs.tags }}`}}
          # Cover pull_request_target too
          PR: {{`${{startsWith(github.event_name, 'pull_request') && 'yes' }}`}}
          LTS_PR: {{`${{(startsWith(github.event_name, 'pull_request') && endsWith(github.base_ref, '-lts')) && 'yes' }}`}}
          TAG: {{`${{startsWith(github.ref, 'refs/tags') && 'yes' }}`}}
        shell: bash
        run: |
          tags=($TAGS)
          gd_tag="master"
          if [[ $GW_OR_DASH=='yes' && $PR=='yes' ]]; then
            gd_tag=${BASE_REF##*/}
          fi
          # Multi line output parameter
          echo "versions<<EOF
          tyk_image=\${ECR}/tyk:${gd_tag}
          tyk_analytics_image=\${ECR}/tyk-analytics:${gd_tag}
          tyk_pump_image=\${ECR}/tyk-pump:master
          tyk_sink_image=\${ECR}/tyk-sink:master
          # override default above with just built tag
          {{ .Name | replace "-" "_" }}_image=${tags[0]}
          # alfa and beta have to come after the override
          tyk_alfa_image=\${tyk_image}
          tyk_beta_image=\${tyk_image}
          EOF" | tee -a "$GITHUB_OUTPUT"
          echo "gd_tag=${gd_tag}" | tee -a "$GITHUB_OUTPUT"

      - name: set scope
        id: scope
        env:
          GW_OR_DASH: {{`(endsWith(github.repository, 'tyk') || endsWith(github.repository, 'tyk-analytics')) && 'yes'`}}
          BASE_REF: {{`startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref`}}
          TAGS: {{`${{ needs.goreleaser.outputs.tags }}`}}
          # Cover pull_request_target too
          PR: {{`${{startsWith(github.event_name, 'pull_request') && 'yes' }}`}}
          LTS_PR: {{`${{(startsWith(github.event_name, 'pull_request') && endsWith(github.base_ref, '-lts')) && 'yes' }}`}}
          TAG: {{`${{startsWith(github.ref, 'refs/tags') && 'yes' }}`}}
        shell: bash
        run: |
          # FIXME: json_array() breaks when elements have spaces
          json_array() {
              for e in $@; do str+="\"$e\", "; done
              echo ${str%, }
          }
          # Defaults for the matrix
          conf=("sha256" "murmur64")
          db=("mongo44" "postgres15")
          {{/* FIXME: get dh repo names from config */ -}}
          pump=("tykio/tyk-pump-docker-pub:v1.8" "\${ECR}/tyk-pump:master")
          sink=("tykio/tyk-mdcb-docker:v2.4" "\${ECR}/tyk-sink:master")
          if [[ $PR ]]; then
              conf=("sha256")
              pump=("\${ECR}/tyk-pump:master")
              sink=("\${ECR}/tyk-sink:master")
          fi
          matrix='{
            "conf": [ %s ],
            "db": [ %s ],
            {{ if ne .Name "tyk-pump" -}}
            "pump": [ %s ],
            {{ end -}} {{/* pump array not needed when the repo is pump */}}
            {{- if ne .Name "tyk-sink" -}}
            "sink": [ %s ],
            {{- end -}} {{/* sink */}}
            "include": [
               {"db": "postgres15", "markers": "and not sql"}
            ]
          }'
          printf "matrix<<EOF\n${matrix}\nEOF" \
                   "$(json_array ${conf[@]})" \
                   "$(json_array ${db[@]})" \
                   {{ if ne .Name "tyk-pump" }} "$(json_array ${pump[@]})" {{ end }} {{ if ne .Name "tyk-sink" }} "$(json_array ${sink[@]})" {{ end }} | tee -a "$GITHUB_OUTPUT"


  api-tests:
    needs: test-controller
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # This is required for requesting the Github JWT
      contents: read    # This is required for actions/checkout
    strategy:
      fail-fast: false
      matrix: {{`${{ fromJson(needs.test-controller.outputs.matrix) }}`}}
{{- template "api-tests" . }}
{{ end -}} {{/* if repo covered by api-tests */}}

{{- template "smoke-tests" . }}

  sbom:
    needs: goreleaser
    uses: TykTechnologies/github-actions/.github/workflows/sbom.yaml@main
    secrets:
      DEPDASH_URL: ${{`{{ secrets.DEPDASH_URL }}`}}
      DEPDASH_KEY: ${{`{{ secrets.DEPDASH_KEY }}`}}
      ORG_GH_TOKEN: ${{`{{ secrets.ORG_GH_TOKEN }}`}}
