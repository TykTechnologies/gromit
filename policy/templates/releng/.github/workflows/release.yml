# Generated by: gromit policy

# Distribution channels covered by this workflow
# - Ubuntu and Debian
# - RHEL and AL
# - docker hub
# - devenv ECR
# - Cloudsmith

name: Release

on:
  # Trigger release every monday at midnight for master CI images
  schedule:
    - cron: "0 0 * * 1"   
  pull_request:
  push:
    branches:
      - master
      - release-**
    tags:
      - 'v*'

env:
  GOPRIVATE: github.com/TykTechnologies
  
jobs:
{{- template "goreleaser" . }}
{{- if not (empty .Branchvals.Tests) }}
{{ $repo := .Name }}
{{ $features := .Branchvals.Features }}
{{ range $test := .Branchvals.Tests }}
  test-controller-{{ $test }}:
    needs: goreleaser
    runs-on: ubuntu-latest-m-2
    container: tykio/gromit:v1.8
    outputs:
      conf: {{`${{ steps.params.outputs.`}}{{ $test }}{{`_conf }}`}}
      db: {{`${{ steps.params.outputs.`}}{{ $test }}{{`_db }}`}}
      cache_db: {{`${{ steps.params.outputs.`}}{{ $test }}{{`_cache_db }}`}}
      pump: {{`${{ steps.params.outputs.pump }}`}}
      sink: {{`${{ steps.params.outputs.sink }}`}}
      gd_tag: {{`${{ steps.params.outputs.gd_tag }}`}}
      versions: {{`${{ steps.params.outputs.versions }}`}}
      exclude: {{`${{ steps.params.outputs.exclude }}`}}
    steps:
      - name: set params
        id: params
        env:
          REPO: {{`${{ github.repository }}`}}
          # Cover pull_request_target too
          BASE_REF: {{`${{startsWith(github.event_name, 'pull_request') && github.base_ref || github.ref}}`}}
          TAGS: {{`${{ needs.goreleaser.outputs.tags }}`}}
          IS_PR: {{`${{startsWith(github.event_name, 'pull_request') && 'yes' }}`}}
          IS_TAG: {{`${{startsWith(github.ref, 'refs/tags') && 'yes' }}`}}
          JOB: {{ $test }}
        run: gromit policy controller --loglevel debug | tee -a "$GITHUB_OUTPUT"
  {{ $test }}-tests:
    needs: [ goreleaser, test-controller-{{ $test }}]
    runs-on: ubuntu-latest-m-2
    env:
      METADATA_REPORT_PATH: /tmp/metadata.toml
      {{ if eq $test "ui" }}
      XUNIT_REPORT_PATH: {{`${{ github.workspace }}`}}/tyk-analytics/tests/ui/playwright-report/results.xml
      {{- end }}
      {{ if eq $test "api" }}
      XUNIT_REPORT_PATH: {{`${{ github.workspace }}`}}/reports/pytest-report.xml
      {{- end }}      
    permissions:
      id-token: write # This is required for requesting the Github JWT
      contents: read # This is required for actions/checkout
    strategy:
      fail-fast: false
      matrix:
        conf: {{`${{ fromJson(needs.test-controller-`}}{{ $test }}{{`.outputs.conf) }}`}}
        db: {{`${{ fromJson(needs.test-controller-`}}{{ $test }}{{`.outputs.db) }}`}}
        cache_db: {{`${{ fromJson(needs.test-controller-`}}{{ $test }}{{`.outputs.cache_db) }}`}}
        {{- if ne $repo "tyk-pump" }}
        pump: {{`${{ fromJson(needs.test-controller-`}}{{ $test }}{{`.outputs.pump) }}`}}
        {{ end }}
        {{- if ne $repo "tyk-sink" }}
        sink: {{`${{ fromJson(needs.test-controller-`}}{{ $test }}{{`.outputs.sink) }}`}}
        {{ end }}
        include:
          - db: postgres15
            markers: "and not sql"
        exclude: {{`${{ fromJson(needs.test-controller-`}}{{ $test }}{{`.outputs.exclude) }}`}}
        {{- template "auto-test" (dict "test" $test "repo" $repo "features" $features) }}        
{{ end }}        
{{ end }}
{{- template "smoke-tests" . }}

  sbom:
    needs: goreleaser
    uses: TykTechnologies/github-actions/.github/workflows/sbom.yaml@main
    secrets:
      DEPDASH_URL: ${{`{{ secrets.DEPDASH_URL }}`}}
      DEPDASH_KEY: ${{`{{ secrets.DEPDASH_KEY }}`}}
      ORG_GH_TOKEN: ${{`{{ secrets.ORG_GH_TOKEN }}`}}
