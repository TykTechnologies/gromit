{{ define "api-tests" }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: false

      - name: Checkout of tyk-automated-tests
        uses: actions/checkout@v4
        with:
          repository: TykTechnologies/tyk-automated-tests
          token: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          ref: {{`${{ startsWith(github.ref_name, 'release-') && github.ref_name || 'master' }}`}}
          path: tyk-automated-tests

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::754489498669:role/ecr_rw_tyk
          role-session-name: cipush
          aws-region: eu-central-1

      - id: ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

        # Only {{`${{ github.actor }}`}} has access
        # See https://github.com/mxschmitt/action-tmate#use-registered-public-ssh-keys
      - name: Setup tmate session only in debug mode
        uses: mxschmitt/action-tmate@v3
        if: {{`${{ runner.debug == '1' }}`}}
        with:
          detached: true
          limit-access-to-actor: true

      - name: env up
        shell: bash
        working-directory: tyk-automated-tests/ci/auto
        id: env_up
        env:
          t: {{`${{ needs.goreleaser.outputs.tags }}`}}
          pull_policy: 'if_not_present'
          # gw and dash use the same branch names
          gw_dash_image_tag: {{`${{ ( (github.repository == 'TykTechnologies/tyk' || github.repository == 'TykTechnologies/tyk-analytics') && startsWith(github.ref_name, 'release-') ) && github.ref_name || 'master' }}`}}
          pump_image_tag: {{`${{ ( github.repository == 'TykTechnologies/tyk-pump' && startsWith(github.ref_name, 'release-') ) && github.ref_name || 'master' }}`}}
          sink_image_tag: {{`${{ ( github.repository == 'TykTechnologies/tyk-sink' && startsWith(github.ref_name, 'release-') ) && github.ref_name || 'master' }}`}}
          GH_TOKEN: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          TYK_DB_LICENSEKEY: {{`${{ secrets.DASH_LICENSE }}`}}
          TYK_MDCB_LICENSE: {{`${{ secrets.MDCB_LICENSE }}`}}
        run: |
          echo CI tags: $t
          tags=($t)
          echo First tag: ${tags[0]}
          # Start customising the env
          echo "registry={{`${{ steps.ecr.outputs.registry }}`}}
          tyk_image=\${registry}/tyk:${gw_dash_image_tag}
          tyk_analytics_image=\${registry}/tyk-analytics:${gw_dash_image_tag}
          tyk_sink_image=\${registry}/tyk-sink:${sink_image_tag}
          tyk_pump_image=\${registry}/tyk-pump:${pump_image_tag}
          # override default above with just built tag
          {{ .Name | replace "-" "_" }}_image=${tags[0]}
    {{- if .eq Name "tyk" }}
          tyk_alfa_image=\${registry}/tyk:${tags[0]}
          tyk_beta_image=\${registry}/tyk:${tags[0]}
    {{- end }}
          # base dir for config files
          confs_dir=./pro-ha
          # pick database to use
          env_file=local-{{`${{ matrix.db }}`}}.env
          " > versions.env
          # Add Tyk component config variations to $env_file
          cat confs/{{`${{ matrix.conf }}`}}.env >> local-{{`${{ matrix.db }}`}}.env
          # bring up env, the project name is important
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile master-datacenter up --quiet-pull -d
          ./dash-bootstrap.sh http://localhost:3000
          docker compose -p auto -f pro-ha.yml -f deps_pro-ha.yml -f {{`${{ matrix.db }}`}}.yml --env-file versions.env --profile slave-datacenter up --quiet-pull -d

      - name: Run tests
        working-directory: tyk-automated-tests/ci/auto
        id: test_execution
        run: |
          docker run --rm --network auto_default --env-file pytest.env \
          {{`${{ steps.ecr.outputs.registry }}/tyk-automated-tests:${{ startsWith(github.ref_name, 'release-') && github.ref_name || 'master' }}`}} \
          pytest -c pytest_ci.ini --ci -m "not local and not dind {{`${{ matrix.markers }}`}}"
# TODO: PR comment, using just one comment and updating, not a new comment each time
      - name: Set test result
        id: test_result
        if: always() && steps.test_execution.outcome != 'success'
        run: echo "pytest_run={{`${{ steps.test_execution.outcome }}`}}" >> $GITHUB_OUTPUT

      - name: Archive Integration tests report
        if: {{`${{ always() }}`}}
        uses: actions/upload-artifact@v2
        with:
            name: api-test-report
            path: {{`${{ github.workspace }}`}}/reports

      - name: Fetch commit author
        if: {{`${{ steps.test_execution.outcome != 'success' && !github.event.pull_request.draft }}`}}            
        run: echo "GIT_USER_EMAIL=$(git show -s --format='%ae' HEAD)" >> $GITHUB_ENV

      - name: Fetch slack user
        if: {{`${{ steps.test_execution.outcome != 'success' && !github.event.pull_request.draft }}`}}   
        id: fetch_slack_user
        uses: TykTechnologies/github-actions/.github/actions/github-to-slack@main
        with:
          github_email: {{`${{ env.GIT_USER_EMAIL }}`}}

      - name: Notify slack
        if: {{`${{ steps.test_execution.outcome != 'success' && !github.event.pull_request.draft }}`}}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: {{`${{ secrets.API_TEST_ALERT_SLACK_WEBHOOK }}`}}
          SLACK_COLOR: {{`${{ job.status }}`}}
          SLACK_TITLE: "Result: {{`${{ steps.test_execution.outcome }}`}}"
          SLACK_USERNAME: API INTEGRATION TESTS
          SLACK_MESSAGE: "*Test*: {{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}}, *Author*: {{`${{ steps.fetch_slack_user.outputs.slack-user-name }}`}}"
          SLACK_FOOTER: "<https://github.com/{{`${{ github.repository }}`}}/actions/runs/{{`${{ github.run_id }}`}}|SEE EXECUTION DETAILS HERE>"

      - name: Comment on PR
        if: {{`${{ always() && !github.event.pull_request.draft }}`}}
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            **API tests result - {{`${{ matrix.db }}`}}-{{`${{ matrix.conf }}`}} env: {{`${{ steps.test_execution.outcome }}`}}** {{`${{ env.STATUS }}`}} 
            Branch used: {{`${{ github.ref }}`}}
            Commit: {{`${{ github.event.after }}`}} {{`${{ github.event.commits[0].message }}`}}
            Triggered by: {{`${{ github.event_name }}`}} (@{{`${{ github.actor }}`}})
            [Execution page](https://github.com/{{`${{ github.repository }}`}}/actions/runs/{{`${{ github.run_id }}`}})
          repo-token: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          message-id: {{`${{ matrix.db }}}}-{{`${{ matrix.conf }}`}}
        env:
          STATUS: "{{`${{ steps.test_execution.outcome == 'success' && ':white_check_mark:' || ':no_entry_sign:' }}`}}"

      - name: Getting gateway logs on failure
        if: {{`${{ failure() }}`}}
        run: docker logs tyk

      - name: Getting dashboard logs on failure
        if: {{`${{ failure() }}`}}
        run: docker logs tyk-analytics

  xray:
    needs: api-tests
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push'

    steps:
      - name: Checkout of tyk-automated-tests
        uses: actions/checkout@v3
        with:
          repository: TykTechnologies/tyk-automated-tests
          token: {{`${{ secrets.ORG_GH_TOKEN }}`}}
          ref: {{`${{ startsWith(github.ref_name, 'release-') && github.ref_name || 'master' }}`}}
          path: tyk-automated-tests

      - name: Xray update
        run: |
          ./update_xray.sh
        working-directory: tyk-automated-tests
        env:
        {{ if eq .Name "tyk" }}
          TEST: "QA-901"
        {{- end }}
        {{ if eq .Name "tyk-analytics" }}
          TEST: "QA-899"
        {{- end }}
        {{ if eq .Name "tyk-sink" }}
          TEST: "QA-1012"
        {{- end }}
        {{ if eq .Name "tyk-pump" }}
          TEST: "QA-1307"
        {{- end }}        
          STATUS: {{`${{ needs.api-tests.outputs.api_test_result || 'success' }}`}}
          CLIENT_ID: {{`${{secrets.XRAY_CLIENT_ID}}`}}
          CLIENT_SECRET: {{`${{secrets.XRAY_CLIENT_SECRET}}`}}
          BRANCH: {{`${{ github.ref }}`}}
{{ end }} {{/* api-tests */}}
